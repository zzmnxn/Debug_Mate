Index: src/agentica/handlers.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { SGlobal } from \"../config/SGlobal\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\nimport { CompilerError, CompilerWarning, CompilerResultParser } from '../parsing/compilerResultParser';\r\nimport { execSync } from \"child_process\";\r\nimport { spawnSync } from \"child_process\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nconst genAI = new GoogleGenerativeAI(SGlobal.env.GEMINI_API_KEY || \"\"); \r\n\r\n\r\n//jm hw\r\nexport function buildAfterDebugPrompt(logSummary: string, errors: CompilerError[], warnings: CompilerWarning[]): string {\r\n  const MAX_ITEMS = 3;\r\n\r\n  const formatError = (e: CompilerError, i: number) =>\r\n    `[Error ${i + 1}] (${e.severity.toUpperCase()} - ${e.type}) ${e.message}${e.file ? ` at ${e.file}:${e.line}:${e.column}` : ''}`;\r\n\r\n  const formatWarning = (w: CompilerWarning, i: number) =>\r\n    `[Warning ${i + 1}] (${w.type}) ${w.message}${w.file ? ` at ${w.file}:${w.line}:${w.column}` : ''}`;\r\n\r\n  const errorText = errors.slice(0, MAX_ITEMS).map(formatError).join('\\n');\r\n  const warningText = warnings.slice(0, MAX_ITEMS).map(formatWarning).join('\\n');\r\n\r\n  return `\r\nYou are a senior compiler engineer and static analysis expert.\r\nYour task is to analyze the compiler output and runtime log from a C/C++ program and determine whether the code has any critical problems that need to be addressed before deployment.\r\n\r\n=== Summary ===\r\n${logSummary}\r\n\r\n=== Compiler Errors ===\r\n${errorText || 'None'}\r\n\r\n=== Compiler Warnings ===\r\n${warningText || 'None'}\r\n\r\n IMPORTANT NOTES:\r\n- Do NOT hallucinate issues not supported by the log.\r\n-If no critical issues: Say clearly \"No critical issues detected\"\r\n- If issues are present: State the most likely cause and suggest a concrete fix (1–2 lines).\r\n- Do NOT guess beyond the given log. If something is unclear, say so briefly (e.g., \"Based on the log alone, it's unclear\").\r\n- Use Korean to response.\r\n\r\nFormat your response in the following structure:\r\n\r\n[Result] {Short message: \"Critical issue detected\" or \"No critical issues detected\"}\r\n[Reason] {Brief explanation of why (e.g., undeclared variable, safe log, etc.)}\r\n[Suggestion] {Fix or say \"No fix required\" if none needed}\r\nDo not add anything outside this format.\r\n\r\n=== Analysis Rules ===\r\n- If error type is \"undeclared\" or message contains \"undeclared\", always treat as critical.\r\n- If a warning or message contains \"memory leak\" or \"leaked\", treat it as a critical issue.\r\n- For unused variable warnings, if variable name is vague (like 'temp'), suggest renaming or removal.\r\n- If runtime log contains \"runtime error\", check if it follows a dangerous cast (e.g., int to pointer). If the code contains a dangerous cast pattern (예: (char*)정수, (int*)정수 등), 반드시 Reason에 'dangerous cast 의심'을 명시하고, Suggestion에 포인터 변환 및 역참조 코드를 점검하라고 안내할 것.\r\n- If the summary or runtime log contains \"[Hint] loopCheck() 함수를 사용하여 루프 조건을 검토해보세요.\", do NOT analyze the cause. Just output the hint exactly as the Suggestion and say \"Critical issue detected\" in Result.\r\n\r\n`.trim();\r\n///다른 함수를 이용해야할 거 같으면 [Hint] ~~ 을 사용해보세요라고 유도 함////////\r\n}\r\n\r\n/**\r\n * 1. afterDebug: 에러/경고 로그 + 요약을 받아 Gemini 분석 수행\r\n */\r\nexport async function afterDebug(logSummary: string, errors: CompilerError[], warnings: CompilerWarning[]): Promise<string> {\r\n  const prompt = buildAfterDebugPrompt(logSummary, errors, warnings);\r\n  const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n  const result = await model.generateContent(prompt);\r\n  return result.response.text().trim();\r\n}\r\n\r\n/**\r\n * 2. afterDebugFromCode: 코드 입력 → 컴파일 → 로그 파싱 → Gemini 분석까지 자동 수행\r\n */\r\nexport async function afterDebugFromCode(code: string): Promise<string> {\r\n  const tmpFile = path.join(\"/tmp\", `code_${Date.now()}.c`);\r\n  fs.writeFileSync(tmpFile, code);\r\n\r\n  let compileLog = \"\";\r\n\r\n  try {\r\n    // 컴파일 단계 - spawnSync 사용으로 변경하여 stderr 확실히 캡처\r\n    const compileResult = spawnSync(\"gcc\", [\r\n      \"-Wall\", \"-Wextra\", \"-Wpedantic\", \"-O2\", \"-Wdiv-by-zero\", \r\n      \"-fanalyzer\", \"-fsanitize=undefined\", \"-fsanitize=address\", tmpFile, \"-o\", \"/tmp/a.out\"\r\n    ], {\r\n      encoding: \"utf-8\",\r\n      stdio: [\"ignore\", \"pipe\", \"pipe\"]\r\n    });\r\n\r\n    // 컴파일 결과 로그 수집\r\n    if (compileResult.stdout) {\r\n      compileLog += compileResult.stdout;\r\n    }\r\n    if (compileResult.stderr) {\r\n      compileLog += compileResult.stderr;\r\n    }\r\n\r\n    // 컴파일 성공 시에만 실행\r\n    if (compileResult.status === 0) {\r\n      compileLog += \"\\n\\n=== Runtime Output ===\\n\";\r\n      const runResult = spawnSync(\"/tmp/a.out\", [], { encoding: \"utf-8\", timeout: 1000 }); // 1초 제한\r\n\r\n      if (runResult.stdout) {\r\n        compileLog += runResult.stdout;\r\n      }\r\n      if (runResult.stderr) {\r\n        compileLog += runResult.stderr;\r\n      }\r\n      if (runResult.stderr.includes(\"runtime error:\")) {\r\n        compileLog += `\\n[Runtime Type] UndefinedBehaviorSanitizer runtime error (UB 가능성)`;\r\n      }\r\n      if (runResult.error) {\r\n        const errorAny = runResult.error as any;\r\n        if (errorAny && errorAny.code === 'ETIMEDOUT') {\r\n          compileLog += `\\n[Runtime Error] Execution timed out (possible infinite loop)\\n loopCheck() 함수를 사용해보세요`;\r\n        } else {\r\n          compileLog += `\\n[Runtime Error] ${runResult.error.message}`;\r\n        }\r\n      }\r\n    } else {\r\n      // 컴파일 실패\r\n      compileLog += \"\\n\\n=== Compile Failed ===\\n\";\r\n      if (compileResult.error) {\r\n        compileLog += `[Compile Process Error] ${compileResult.error.message}\\n`;\r\n      }\r\n    }\r\n\r\n  } catch (err: any) {\r\n    // 예상치 못한 에러\r\n    compileLog += \"\\n\\n=== Unexpected Error ===\\n\";\r\n    compileLog += err.message || err.toString();\r\n  }\r\n  // 디버깅용 로그 (필요시 주석 해제)\r\n  // console.log(\"=== \uD83E\uDDFE GCC + Runtime 로그 ===\");\r\n  // console.log(compileLog);\r\n\r\n  const parsed = CompilerResultParser.parseCompilerOutput(compileLog);\r\n  const summary = CompilerResultParser.generateSummary(parsed);\r\n  return afterDebug(summary, parsed.errors, parsed.warnings);\r\n}\r\n\r\n\r\n\r\nexport async function loopCheck({ code }: { code: string }) {\r\n  const prompt = `Review the following loop code and determine if its termination condition is valid. If there is an issue, provide a concise explanation and a corrected example snippet. Respond in Korean, focusing on the core insights.\r\n  \\`\\`\\`${code}\\`\\`\\``;\r\n\r\n  const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n  const result = await model.generateContent(prompt);\r\n  return { result: result.response.text() };\r\n}\r\n\r\n\r\n// sohyeon's hw\r\nexport async function traceVar({ code }: { code: string }) {\r\n  const prompt = `Analyze the following code snippet and trace the flow of variables.\r\n\r\n  **Response Format:**\r\n  - **If no variables are used in the code,** please respond only with \"No variables are used.\"\r\n  - **If variables are used in the code,** please provide a concise explanation for each variable in the following format:\r\n    \\`\\`\\`\r\n    Variable 1: [Variable Name]\r\n    - [Concise and intuitive explanation of variable value changes]\r\n    Variable 2: [Variable Name]\r\n    - [Concise and intuitive explanation of variable value changes]\r\n    ...\r\n    \\`\\`\\`\r\n    The explanation should be short and intuitive, but clearly explain the changes in variable values.\r\n\r\n  Please respond in Korean.\r\n\r\n  \\`\\`\\`${code}\\`\\`\\``;\r\n  const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n  const result = await model.generateContent(prompt);\r\n  return { variableTrace: result.response.text() };\r\n}\r\n\r\n// jimin's hw\r\nexport async function testBreak({ codeSnippet }: { codeSnippet: string }) {\r\n  const prompt = buildPrompt(codeSnippet);\r\n\r\n  const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n  const result = await model.generateContent(prompt);\r\n\r\n  const responseText = result.response.text().trim();\r\n\r\n  try {\r\n    const parsed = JSON.parse(responseText);\r\n    return parsed;\r\n  } catch (err) {\r\n    throw new Error(`Failed to parse model output as JSON:\\n${responseText}`);\r\n  }\r\n}\r\n\r\nfunction buildPrompt(codeSnippet: string): string {\r\n  return `\r\nYou are a static analysis expert specializing in detecting undefined behavior and runtime bugs in C/C++ code.\r\n\r\nAnalyze the following code snippet or function and determine whether it is likely to cause any critical issue during execution.\r\n\r\nThe issues you must consider include (but are not limited to):\r\n\r\n- Null pointer dereference\r\n- Division by zero\r\n- Out-of-bound memory access\r\n- Use of uninitialized variables\r\n- Use-after-free\r\n- Memory leaks (e.g., missing free or delete)\r\n- Infinite or non-terminating loops\r\n- Recursion with no base case\r\n- Dangerous type coercion or overflow\r\n- Dead code or unreachable branches\r\n\r\nIf the code is buggy, explain the reason and how to fix it.\r\nIf the code is safe, explain why it does not cause any problem.\r\n\r\n⚠\uFE0F Your response must strictly follow this JSON format:\r\n\r\n{\r\n  \"isBuggy\": true or false,\r\n  \"reason\": \"string (describe why the code is buggy or safe)\",\r\n  \"suggestion\": \"string (how to fix, or null if safe)\"\r\n}\r\n\r\n❗ Do not include anything outside this JSON object.\r\nDo not add comments, explanations, markdown formatting, or any additional prose.\r\n\r\nNow analyze the following code:\r\n\r\n${codeSnippet}\r\n  `.trim();\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/agentica/handlers.ts b/src/agentica/handlers.ts
--- a/src/agentica/handlers.ts	(revision 02a80b488a58efc8b0975f8d35d5cab058562115)
+++ b/src/agentica/handlers.ts	(date 1754124108217)
@@ -193,6 +193,65 @@
   }
 }
 
+// moonjeong's hw1
+export async function beforeDebug({ code }: { code: string }) {
+  const prompt = `당신은 C 언어 전문가입니다. 아래는 사용자가 작성 중인 전체 코드입니다.
+
+코드가 아직 실행되기 전 상태로, 문법 오류, 누락된 세미콜론, 선언되지 않은 변수, 함수 호출 오류, 누락된 return 문 등 명백한 문제점이 있는지 확인해주세요.
+
+가능하면 줄 번호를 포함해 수정 제안을 해주세요. 아직 작성 중일 수 있으므로 유연하게 판단해주세요.
+
+답변은 다음 형식을 지켜주세요:
+
+[Result] 문제가 감지되었는지 여부 (예: "문제 있음", "문제 없음")
+[Issues] 줄 번호와 함께 발견된 주요 문제 요약 (없으면 "없음")
+[Suggestions] 각 문제에 대한 간단한 수정 제안 (없으면 "없음")
+
+아래는 코드입니다:
+  \`\`\`${code}\`\`\``;
+
+  const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
+  const result = await model.generateContent(prompt);
+  return { result: result.response.text() };
+}
+
+// moonjeong's hw2
+export async function inProgressDebug(code: string): Promise<string> {
+  const prompt = `
+당신은 C 언어 디버깅 전문가입니다.
+
+사용자가 코드를 작성하는 도중입니다. 아직 완성되지 않은 코드일 수 있습니다.
+현재까지 작성된 코드에서 다음을 찾아주세요:
+
+1. 문법 오류나 괄호 누락
+2. 변수 선언 누락
+3. 흐름상 부자연스러운 부분
+4. 명확한 개선점이 있는 코드
+
+🎯 [응답 형식]
+[문제 요약]
+- 문제1
+- 문제2 (있다면)
+
+[개선 제안]
+- 코드 일부 수정 예시 또는 간결한 설명
+
+주의: 코드가 완전하지 않아도 분석해야 합니다.
+
+작성 중인 코드:
+\`\`\`c
+${code}
+\`\`\`
+`.trim();
+
+  const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
+  const result = await model.generateContent(prompt);
+  return result.response.text().trim();
+}
+
+
+
+
 function buildPrompt(codeSnippet: string): string {
   return `
 You are a static analysis expert specializing in detecting undefined behavior and runtime bugs in C/C++ code.
Index: src/agentica/server.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport { WebSocketServer } from \"tgrid\";\r\nimport { SGlobal } from \"../config/SGlobal\";\r\nimport { afterDebug, afterDebugFromCode, loopCheck, traceVar, testBreak } from \"./handlers\";\r\n\r\nconst main = async (): Promise<void> => {\r\n  const port = Number(SGlobal.env.PORT);\r\n  const server = new WebSocketServer();\r\n\r\n  console.log(`Gemini function server running on port ${port}`);\r\n  await server.open(port, async (acceptor) => {\r\n    await acceptor.accept({\r\n      afterDebug,\r\n      afterDebugFromCode,\r\n      loopCheck,\r\n      traceVar,\r\n      testBreak\r\n    });\r\n    console.log(`Connection accepted: ${acceptor.path}`);\r\n    console.log(`Available controllers: afterDebug, loopCheck, traceVar, testBreak`);\r\n  });\r\n  console.log(`WebSocket server running on port ${port}.`);\r\n};\r\nmain().catch(console.error);\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/agentica/server.ts b/src/agentica/server.ts
--- a/src/agentica/server.ts	(revision 02a80b488a58efc8b0975f8d35d5cab058562115)
+++ b/src/agentica/server.ts	(date 1754124230568)
@@ -1,7 +1,7 @@
 
 import { WebSocketServer } from "tgrid";
 import { SGlobal } from "../config/SGlobal";
-import { afterDebug, afterDebugFromCode, loopCheck, traceVar, testBreak } from "./handlers";
+import { afterDebug, afterDebugFromCode, loopCheck, traceVar, testBreak, inProgressDebug, beforeDebug } from "./handlers";
 
 const main = async (): Promise<void> => {
   const port = Number(SGlobal.env.PORT);
@@ -14,10 +14,12 @@
       afterDebugFromCode,
       loopCheck,
       traceVar,
-      testBreak
+      testBreak,
+      inProgressDebug,
+      beforeDebug
     });
     console.log(`Connection accepted: ${acceptor.path}`);
-    console.log(`Available controllers: afterDebug, loopCheck, traceVar, testBreak`);
+    console.log(`Available controllers: afterDebug, loopCheck, traceVar, testBreak, inProgressDebug, beforeDebug`);
   });
   console.log(`WebSocket server running on port ${port}.`);
 };
Index: test_driver.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport \"dotenv/config\";\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\n\r\nimport { runLoopCheck } from \"./src/testcode/test_loopCheck\";\r\nimport { runTraceVar } from \"./src/testcode/test_traceVar\";\r\n\r\nasync function main() {\r\n  const args = process.argv.slice(2);\r\n\r\n  if (args.length === 0) {\r\n    console.error(\"❌ 분석할 파일명을 입력하세요 .\");\r\n    console.error(\"예시: npx ts-node test_driver.ts test.c\");\r\n    process.exit(1);\r\n  }\r\n\r\n  const filename = args[0];\r\n  const filepath = path.resolve(process.cwd(), filename);\r\n\r\n  if (!fs.existsSync(filepath)) {\r\n    console.error(`❌ 파일이 존재하지 않습니다: ${filepath}`);\r\n    process.exit(1);\r\n  }\r\n\r\n  const code = fs.readFileSync(filepath, \"utf-8\");\r\n\r\n  console.log(`✅ '${filename}'에 대한 분석을 시작합니다.\\n`);\r\n\r\n  await runLoopCheck(code);\r\n  await runTraceVar(code);\r\n\r\n  console.log(\"\\n✅ 모든 분석이 완료되었습니다.\");\r\n}\r\n\r\nmain();\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test_driver.ts b/test_driver.ts
--- a/test_driver.ts	(revision 02a80b488a58efc8b0975f8d35d5cab058562115)
+++ b/test_driver.ts	(date 1754071869276)
@@ -3,8 +3,13 @@
 import * as fs from "fs";
 import * as path from "path";
 
+import { runBeforeDebug } from "./src/testcode/test_beforeDebug";
 import { runLoopCheck } from "./src/testcode/test_loopCheck";
 import { runTraceVar } from "./src/testcode/test_traceVar";
+//import { runAfterDebug } from "./src/testcode/test_afterDebug";
+//import { runDebugHint } from "./src/testcode/test_debugHint";
+//import { runDiagnoseError } from "./src/testcode/test_diagnoseError";
+
 
 async function main() {
   const args = process.argv.slice(2);
@@ -27,8 +32,13 @@
 
   console.log(`✅ '${filename}'에 대한 분석을 시작합니다.\n`);
 
+  await runBeforeDebug(code);
   await runLoopCheck(code);
   await runTraceVar(code);
+  //await runAfterDebug(code);
+  //await runDebugHint(code);
+  //await runDiagnoseError(code);
+
 
   console.log("\n✅ 모든 분석이 완료되었습니다.");
 }
Index: src/agentica/functions.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { CompilerError, CompilerWarning } from \"../parsing/compilerResultParser\";\r\nimport { loopCheck, testBreak, traceVar, afterDebug } from \"./handlers\";\r\nimport typia from \"typia\";\r\n\r\nexport class ErrorDiagnosisService {\r\n  \r\n  async loopCheck({ code }: { code: string }) {\r\n    return loopCheck({ code });\r\n  }\r\n  async traceVar({ code }: { code: string }) {\r\n    return traceVar({ code });\r\n  }\r\n  async testBreak({ codeSnippet }: { codeSnippet: string }) {\r\n    return testBreak({ codeSnippet });\r\n  }\r\n  async afterDebug({ logSummary, errors, warnings }: { logSummary: string, errors: CompilerError[], warnings: CompilerWarning[] }) {\r\n    return afterDebug(logSummary, errors, warnings);\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/agentica/functions.ts b/src/agentica/functions.ts
--- a/src/agentica/functions.ts	(revision 02a80b488a58efc8b0975f8d35d5cab058562115)
+++ b/src/agentica/functions.ts	(date 1754124181917)
@@ -1,5 +1,5 @@
 import { CompilerError, CompilerWarning } from "../parsing/compilerResultParser";
-import { loopCheck, testBreak, traceVar, afterDebug } from "./handlers";
+import {loopCheck, testBreak, traceVar, afterDebug, inProgressDebug, beforeDebug } from "./handlers";
 import typia from "typia";
 
 export class ErrorDiagnosisService {
@@ -16,4 +16,19 @@
   async afterDebug({ logSummary, errors, warnings }: { logSummary: string, errors: CompilerError[], warnings: CompilerWarning[] }) {
     return afterDebug(logSummary, errors, warnings);
   }
+  async inProgressDebug({ code }: { code: string }) {
+    return inProgressDebug(code);
+  }
+  async beforeDebug({ code }: { code: string }) {
+    return beforeDebug({ code });
+  }
+  /*
+  async debugHint({ code }: { code: string }) {
+    return beforeDebug({ code });
+  }
+  async diagnoseError({ code }: { code: string }) {
+    return beforeDebug({ code });
+  }
+
+   */
 }
\ No newline at end of file
Index: src/testcode/test_debugHint.ts
===================================================================
diff --git a/src/testcode/test_debugHint.ts b/src/testcode/test_debugHint.ts
deleted file mode 100644
--- a/src/testcode/test_debugHint.ts	(revision 02a80b488a58efc8b0975f8d35d5cab058562115)
+++ /dev/null	(revision 02a80b488a58efc8b0975f8d35d5cab058562115)
@@ -1,7 +0,0 @@
-import { ErrorDiagnosisService } from "../agentica/functions";
-
-export async function runDebugHint(code: string) {
-  const service = new ErrorDiagnosisService();
-  const result = await service.debugHint({ output: code });
-  console.log("[디버그 힌트 결과]", result.hint);
-} 
\ No newline at end of file
Index: src/testcode/test_diagnoseError.ts
===================================================================
diff --git a/src/testcode/test_diagnoseError.ts b/src/testcode/test_diagnoseError.ts
deleted file mode 100644
--- a/src/testcode/test_diagnoseError.ts	(revision 02a80b488a58efc8b0975f8d35d5cab058562115)
+++ /dev/null	(revision 02a80b488a58efc8b0975f8d35d5cab058562115)
@@ -1,8 +0,0 @@
-import { ErrorDiagnosisService } from "../agentica/functions";
-
-export async function runDiagnoseError(code: string) {
-  const service = new ErrorDiagnosisService();
-  // 컴파일 에러 메시지 예시로 code를 그대로 전달
-  const result = await service.diagnoseError({ errorMessage: code });
-  console.log("[에러 진단 결과]", result.explanation);
-} 
\ No newline at end of file
Index: test2.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test2.c b/test2.c
new file mode 100644
--- /dev/null	(date 1754124415850)
+++ b/test2.c	(date 1754124415850)
@@ -0,0 +1,9 @@
+#include <stdio.h>
+
+int main() {
+    int a = 5;
+    int b = 0;
+
+    printf("Result: %d", a / b
+
+    return 0;
Index: .idea/prettier.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/prettier.xml b/.idea/prettier.xml
new file mode 100644
--- /dev/null	(date 1752910109759)
+++ b/.idea/prettier.xml	(date 1752910109759)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="PrettierConfiguration">
+    <option name="myConfigurationMode" value="AUTOMATIC" />
+  </component>
+</project>
\ No newline at end of file
Index: src/parsing/loopExtractor.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><\r\n/**\r\n * 코드 문자열에서 for/while 루프 블록만 추출 (간단한 정규식 기반)\r\n * 복잡한 중첩/주석/문자열 내 루프는 완벽히 처리하지 못할 수 있음\r\n */\r\nexport function extractLoopsFromCode(code: string): string[] {\r\n  const loopRegex = /(for\\s*\\([^)]*\\)\\s*\\{[\\s\\S]*?\\}|while\\s*\\([^)]*\\)\\s*\\{[\\s\\S]*?\\})/g;\r\n  const matches = code.match(loopRegex);\r\n  return matches ? matches : [];\r\n\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/parsing/loopExtractor.ts b/src/parsing/loopExtractor.ts
--- a/src/parsing/loopExtractor.ts	(revision 02a80b488a58efc8b0975f8d35d5cab058562115)
+++ b/src/parsing/loopExtractor.ts	(date 1753603815587)
@@ -1,4 +1,4 @@
-<
+
 /**
  * 코드 문자열에서 for/while 루프 블록만 추출 (간단한 정규식 기반)
  * 복잡한 중첩/주석/문자열 내 루프는 완벽히 처리하지 못할 수 있음
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1752910088742)
+++ b/.idea/.gitignore	(date 1752910088742)
@@ -0,0 +1,8 @@
+# 디폴트 무시된 파일
+/shelf/
+/workspace.xml
+# 에디터 기반 HTTP 클라이언트 요청
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: .idea/DebugMate2.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/DebugMate2.iml b/.idea/DebugMate2.iml
new file mode 100644
--- /dev/null	(date 1754124409130)
+++ b/.idea/DebugMate2.iml	(date 1754124409130)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1752910109775)
+++ b/.idea/vcs.xml	(date 1752910109775)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1752910109759)
+++ b/.idea/modules.xml	(date 1752910109759)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/DebugMate2.iml" filepath="$PROJECT_DIR$/.idea/DebugMate2.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: src/testcode/test_beforeDebug.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/testcode/test_beforeDebug.ts b/src/testcode/test_beforeDebug.ts
new file mode 100644
--- /dev/null	(date 1754034176287)
+++ b/src/testcode/test_beforeDebug.ts	(date 1754034176287)
@@ -0,0 +1,7 @@
+import { beforeDebug } from "../agentica/handlers";
+
+export async function runBeforeDebug(code: string) {
+    const { result } = await beforeDebug({ code });
+    console.log("🧪 [beforeDebug 결과]");
+    console.log(result);
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1752910109759)
+++ b/.idea/misc.xml	(date 1752910109759)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-23" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/testcode/test_inProgressDebug.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/testcode/test_inProgressDebug.ts b/src/testcode/test_inProgressDebug.ts
new file mode 100644
--- /dev/null	(date 1754124255909)
+++ b/src/testcode/test_inProgressDebug.ts	(date 1754124255909)
@@ -0,0 +1,24 @@
+import fs from "fs";
+import path from "path";
+import { inProgressDebug } from "../agentica/handlers";
+
+async function main() {
+    const args = process.argv.slice(2);
+    if (args.length === 0) {
+        console.error("❌ 작성 중인 코드 파일 경로를 입력하세요.");
+        process.exit(1);
+    }
+
+    const filepath = path.resolve(process.cwd(), args[0]);
+    if (!fs.existsSync(filepath)) {
+        console.error(`❌ 파일이 존재하지 않습니다: ${filepath}`);
+        process.exit(1);
+    }
+
+    const code = fs.readFileSync(filepath, "utf-8");
+    const result = await inProgressDebug(code);
+    console.log("📝 [작성 중 디버깅 결과]");
+    console.log(result);
+}
+
+main();
