name: Release (NPM)

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: read
  id-token: write

jobs:
  publish-npm:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cli

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20 (NPM registry & always-auth)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          always-auth: true

      - name: Install deps
        run: npm ci

      # 모노레포 → cli 패키지로 필요한 소스/문서 복사
      - name: Copy source files
        run: |
          mkdir -p src
          cp -r ../src/* src/
          cp ../tsconfig.json .
          cp ../watch-and-debug.sh .
          cp ../debug-mate-tmux.sh .
          cp ../generate-test.sh .
          # package.json: files 배열에 포함된 문서도 같이 복사 (있을 때만)
          [ -f ../README.md ] && cp ../README.md .
          [ -f ../LICENSE ] && cp ../LICENSE .

      - name: Make scripts executable
        run: chmod +x watch-and-debug.sh debug-mate-tmux.sh generate-test.sh || true

      # 태그와 package.json 버전 일치 검증 (예: v1.1.0 ↔ package.json: 1.1.0)
      - name: Verify tag matches package version
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          PKG_VERSION="v$(jq -r .version package.json)"
          echo "Tag: $TAG"
          echo "Pkg: $PKG_VERSION"
          if [ "$TAG" != "$PKG_VERSION" ]; then
            echo "::error::Tag ($TAG) does not match package.json version ($PKG_VERSION)."
            exit 1
          fi

      - name: Build
        run: npm run build

      # dist 산출물 존재 여부 + bin 대상 스크립트 존재 여부 확인
      - name: Verify build artifacts
        run: |
          test -d dist || (echo "::error::dist/ not found" && exit 1)
          test -f watch-and-debug.sh || (echo "::error::watch-and-debug.sh missing" && exit 1)

      # NPM에 실제로 무엇이 올라갈지 사전 확인
      - name: Pack dry-run (inspect files)
        run: npm pack --dry-run

      # provenance 첨부하여 퍼블리시
      - name: Publish to NPM (with provenance)
        run: npm publish --access public --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
